name: Docker Build and Test

on:
  push:
    branches:
      - master  # Adjust to your branch name if necessary
  workflow_dispatch:  # Enables manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to DockerHub (Optional, if pushing the image to DockerHub)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Add this secret in your repository
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -f ./Dockerfile --no-cache -t random-forest-api .

      # Step 5: Run Docker container
      - name: Run Docker container
        run: |
          docker run -d -p 5000:5000 random-forest-api

      # Step 6: Test the Flask API using curl
      - name: Test the Flask API
        run: |
          echo "Waiting for Flask app to be ready..."
          
          # Try to reach the Flask app endpoint and wait until it's ready (up to 30 seconds)
          for i in {1..30}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/predict)
            if [[ "$response" == "200" ]]; then
              echo "Flask app is ready, making API request..."
              break
            fi
            echo "Waiting for Flask app... Attempt $i/30"
            sleep 1
          done
          
          # Make a prediction API request using curl
          response=$(curl -s -X POST http://localhost:5000/predict \
            -H "Content-Type: application/json" \
            -d '{"features": [5.1, 3.5, 1.4, 0.2]}')
          
          # Check the response
          echo "API Response: $response"
          
          # Assert the correct response (Optional)
          if [[ "$response" != *"prediction"* ]]; then
            echo "API test failed."
            exit 1
          else
            echo "API test succeeded."
          fi

      # Step 7: Check Docker logs for debugging (Optional)
      - name: Check Docker logs
        run: |
          docker logs $(docker ps -q)
